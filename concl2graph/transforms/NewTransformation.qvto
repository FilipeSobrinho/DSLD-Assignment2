modeltype ConCL uses 'http://www.example.org/concl';
modeltype Graph uses 'http://dsldesign.tue.nl/graph';

transformation ConCL2Graph(in concl : ConCL, out graph : Graph);

// The main function of the transformation
    // For each ConsolePack in the ConCL model, applies the consolepack2graph mapping
    // The result of the mapping (a Graph::Graph object) is collected into a sequence
   
main() {
    concl.rootObjects()[ConCL::Model].consolepack->collect(cp | cp.map consolepack2graph());
}


mapping ConCL::ConsolePack::consolepack2graph() : Graph::Graph {
    name := self.name;

    nodes += self.map consolepackname2node();
    
    // Create a node for the Controller Colour
    var controllerColourNode := object Graph::Node {
        label := 'Controller Colour';
        shape := Graph::Shape::BOX;
    };
    nodes += controllerColourNode;
    
    // Create a node for the Display
	var displayNode := object Graph::Node {
	    label := 'Display';
	    shape := Graph::Shape::BOX;
	};
	nodes += displayNode;
    
    // Declare and initialize a variable for indexing
    var index : Integer := 1;
    
    // Use a while loop to iterate over the controller components
    while (index <= self.controllercomponent->size()) {
        // Get the controller at the current index
        var controller := self.controllercomponent->at(index);
        // Map the controller to a node and add it to the nodes
        var controllerNode := controller.map controller2node(index);
        nodes += controllerNode;
        
        // Create an edge from the ConsolePack node to the Controller node
        var controllerEdge := object Graph::Edge {
            style := Graph::Style::SOLID;
            target := controllerNode;
        };
        self.map consolepackname2node().outEdges += controllerEdge;
        
        // Create a node for the controller color
        var colorNode := object Graph::Node {
            label := controller.color.toString();
            shape := Graph::Shape::BOX;
        };
        nodes += colorNode;
        
        // Create an edge from the Controller Colour node to the Color node
        var colorEdge := object Graph::Edge {
            style := Graph::Style::SOLID;
            target := colorNode;
        };
        controllerColourNode.outEdges += colorEdge;
        
        // Create an edge from the Color node to the Controller node
        var colorToControllerEdge := object Graph::Edge {
            style := Graph::Style::SOLID;
            target := controllerNode;
        };
        colorNode.outEdges += colorToControllerEdge;
        
        // The index is incremented to move to the next controller component
        index := index + 1;
    };
    
	// Declare and initialize a variable for the console index
    var consoleIndex : Integer := 1;
    // Use a while loop to iterate over the console components
    while (consoleIndex <= self.consolecomponent->size()) {
        // Get the console at the current index
        var console := self.consolecomponent->at(consoleIndex);
        // Map the display component to a node and add it to the nodes
        var eachDisplayNode := console.displaycomponent.map display2node(consoleIndex);
        nodes += eachDisplayNode;
        
        // Create an edge from the ConsolePack node to the eachDisplayNode node
		var displayEdge := object Graph::Edge {
		    style := Graph::Style::SOLID;
		    target := eachDisplayNode;
		};
		self.map consolepackname2node().outEdges += displayEdge;
        
        // Create a node for the display type
		var displayTypeNode := object Graph::Node {
		    label := console.displaycomponent.displayType.toString();
		    shape := Graph::Shape::OVAL;
		};
		nodes += displayTypeNode;
		
		// Create a node for the display resolution
		var resolutionNode := object Graph::Node {
		    label := console.displaycomponent.resolution.toString();
		    shape := Graph::Shape::OVAL;
		};
		nodes += resolutionNode;
		
		// Create an edge from the eachDisplayNode node to the Display Type node
		var displayTypeEdge := object Graph::Edge {
		    style := Graph::Style::DASHED;
		    target := displayTypeNode;
		};
		eachDisplayNode.outEdges += displayTypeEdge;
		
		// Create an edge from the eachDisplayNode node to the Resolution node
		var resolutionEdge := object Graph::Edge {
		    style := Graph::Style::DASHED;
		    target := resolutionNode;
		};
		eachDisplayNode.outEdges += resolutionEdge;
		

        // Create a node for the display diagonal size
		var diagonalSizeNode := object Graph::Node {
		    label := console.displaycomponent.diagonalSize.toString() + ' Inch';
		    shape := Graph::Shape::BOX;
		};
		nodes += diagonalSizeNode;

		// Create an edge from the Diagonal Size node to eachDisplayNode node
		var diagonalSizeEdge := object Graph::Edge {
		    style := Graph::Style::SOLID;
		    target := eachDisplayNode;
		};
        diagonalSizeNode.outEdges += diagonalSizeEdge;
        
        
        // Create an edge from the Display node to Diagonal Size node
		var Display2diagonalSizeEdge := object Graph::Edge {
		    style := Graph::Style::SOLID;
		    target := diagonalSizeNode;
		};
        displayNode.outEdges += Display2diagonalSizeEdge;

        
        // Increment the console index
        consoleIndex := consoleIndex + 1;
    }
}


mapping ConCL::ConsolePack::consolepackname2node() : Graph::Node {
    label := self.name;
    shape := Graph::Shape::BOX;
}

mapping ConCL::DisplayComponent::display2node(index: Integer) : Graph::Node {
	label := 'display' + index.toString();
    shape := Graph::Shape::BOX;
}

mapping ConCL::Controller::controller2node(index: Integer) : Graph::Node {
    label := 'controller' + index.toString();
    shape := Graph::Shape::BOX;
}
